{"version":3,"file":"static/js/969.a31e77e4.chunk.js","mappings":"0KACA,G,QAAA,CAAgB,QAAU,yBAAyB,aAAe,8BAA8B,SAAW,0BAA0B,OAAS,0B,mBCOjIA,EAAa,SAAC,GAAkC,IAAhCC,EAA+B,EAA/BA,KAAMC,EAAyB,EAAzBA,GACjC,OACE,gBAAKC,UAAWC,EAAAA,OAAhB,UACE,SAAC,KAAD,CAASC,GAAI,YAAcH,EAA3B,SAAgCD,OCJzBK,EAAU,SAAC,GAA8B,IAA5BC,EAA2B,EAA3BA,QACxB,OAAO,gBAAKJ,UAAWC,EAAAA,QAAhB,SAA4BG,K,wCC2DrC,MAzDA,WACE,IAAMC,GAAWC,EAAAA,EAAAA,MACXC,GAAQC,EAAAA,EAAAA,KAAe,SAACD,GAAD,OAAWA,EAAME,WACxCC,GAASF,EAAAA,EAAAA,KAAe,SAACD,GAAD,OAAWA,EAAMI,KAAKD,UAE9CE,GAASC,EAAAA,EAAAA,IAAU,CACvBC,cAAe,CACbV,QAAS,IAEXW,SAAU,YAAkB,IAAfX,EAAc,EAAdA,QACLY,EAA+B,GAMrC,OALKZ,EAEMA,EAAQa,OAAS,KAC1BD,EAAOZ,QAAU,6CAFjBY,EAAOZ,QAAU,2BAIZY,GAETE,SAAU,YAAkB,IAAfd,EAAc,EAAdA,QACXC,GAASc,EAAAA,EAAAA,GAAcf,IACvBQ,EAAOQ,eAIX,OAAKV,GAKH,iBAAKV,UAAWC,EAAAA,QAAhB,WACE,gBAAKD,UAAWC,EAAAA,aAAhB,SACGM,EAAME,QAAQY,KAAI,SAACC,GAClB,OAAO,SAACzB,EAAD,CAAuBC,KAAMwB,EAAExB,KAAMC,GAAIuB,EAAEvB,IAA1BuB,EAAEvB,UAG9B,iBAAKC,UAAWC,EAAAA,SAAhB,WACE,yBACGM,EAAMgB,SAASF,KAAI,SAACG,GACnB,OAAO,SAACrB,EAAD,CAASJ,GAAIyB,EAAEzB,GAAIK,QAASoB,EAAEpB,SAAcoB,EAAEzB,UAGzD,kBAAMmB,SAAUN,EAAOa,aAAvB,WACE,0BACE,4BAAWb,EAAOc,cAAc,eAEjCd,EAAOe,QAAQvB,SAAWQ,EAAOI,OAAOZ,UACvC,iBAAMwB,MAAO,CAAEC,MAAO,OAAtB,SAAgCjB,EAAOI,OAAOZ,WAEhD,0BACE,mBAAQ0B,KAAK,SAAb,8BAxBD,SAAC,KAAD,CAAU5B,GAAI","sources":["webpack://samurai-way/./src/components/Dialogs/Dialogs.module.css?1b2e","components/Dialogs/DialogItem/DialogItem.tsx","components/Dialogs/Message/Message.tsx","components/Dialogs/Dialogs.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__09EW8\",\"dialogsItems\":\"Dialogs_dialogsItems__HFkUr\",\"messages\":\"Dialogs_messages__JdScj\",\"active\":\"Dialogs_active__XvKDy\"};","import s from \"../Dialogs.module.css\";\nimport { NavLink } from \"react-router-dom\";\nimport React from \"react\";\n\ntype DialogItemType = {\n  name: string;\n  id: number;\n};\nexport const DialogItem = ({ name, id }: DialogItemType) => {\n  return (\n    <div className={s.dialog}>\n      <NavLink to={\"/dialogs/\" + id}>{name}</NavLink>\n    </div>\n  );\n};\n","import s from \"../Dialogs.module.css\";\nimport React from \"react\";\n\ntype MessageType = {\n  id: number;\n  message: string;\n};\nexport const Message = ({ message }: MessageType) => {\n  return <div className={s.message}>{message}</div>;\n};\n","import React from \"react\";\nimport s from \"./Dialogs.module.css\";\nimport { DialogItem } from \"./DialogItem/DialogItem\";\nimport { Message } from \"./Message/Message\";\nimport { SendMessageAC } from \"../../Redux/dialogs-reducer\";\nimport { useAppDispatch, useAppSelector } from \"../../Redux/redux-store\";\nimport { Navigate } from \"react-router-dom\";\nimport { useFormik } from \"formik\";\nimport { AddPostAC } from \"Redux/profile-reducer\";\n\nfunction Dialogs() {\n  const dispatch = useAppDispatch();\n  const state = useAppSelector((state) => state.dialogs);\n  const isAuth = useAppSelector((state) => state.auth.isAuth);\n\n  const formik = useFormik({\n    initialValues: {\n      message: \"\",\n    },\n    validate: ({ message }) => {\n      const errors: { message?: string } = {};\n      if (!message) {\n        errors.message = \"You must enter a message\";\n      } else if (message.length > 30) {\n        errors.message = \"Message should be less than 30 characters\";\n      }\n      return errors;\n    },\n    onSubmit: ({ message }) => {\n      dispatch(SendMessageAC(message));\n      formik.resetForm();\n    },\n  });\n\n  if (!isAuth) {\n    return <Navigate to={\"/login\"} />;\n  }\n\n  return (\n    <div className={s.dialogs}>\n      <div className={s.dialogsItems}>\n        {state.dialogs.map((d) => {\n          return <DialogItem key={d.id} name={d.name} id={d.id} />;\n        })}\n      </div>\n      <div className={s.messages}>\n        <div>\n          {state.messages.map((m) => {\n            return <Message id={m.id} message={m.message} key={m.id} />;\n          })}\n        </div>\n        <form onSubmit={formik.handleSubmit}>\n          <div>\n            <input {...formik.getFieldProps(\"message\")} />\n          </div>\n          {formik.touched.message && formik.errors.message && (\n            <span style={{ color: \"red\" }}>{formik.errors.message}</span>\n          )}\n          <div>\n            <button type=\"submit\">send</button>\n          </div>\n        </form>\n      </div>\n    </div>\n  );\n}\n\nexport default Dialogs;\n"],"names":["DialogItem","name","id","className","s","to","Message","message","dispatch","useAppDispatch","state","useAppSelector","dialogs","isAuth","auth","formik","useFormik","initialValues","validate","errors","length","onSubmit","SendMessageAC","resetForm","map","d","messages","m","handleSubmit","getFieldProps","touched","style","color","type"],"sourceRoot":""}